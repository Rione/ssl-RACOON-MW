syntax = "proto2";

import "ssl_gc_game_event.proto";

option go_package = "github.com/Rione-SSL/RACOON-Pi/proto/pb_gen";


message Robot_Infos {
  required uint32 robot_id = 1;
  required float x = 2;
  required float y = 3;
  required float theta = 4;
  optional float distance_ball_robot = 5;
  optional float radian_ball_robot = 6;
  required float diff_x = 7;
  required float diff_y = 8;
  required float diff_theta = 9;
  required float speed = 10;
  required float slope = 11;
  required float intercept = 12;
  required float angular_velocity = 13;
  required bool visible = 14;
  optional bool ball_catch = 15;
  optional bool online = 16;
  optional float battery_voltage = 17;
}

message Ball_Info {
  required float filtered_x = 1;
  required float filtered_y = 2;
  required float x = 3;
  required float y = 4;
  required float z = 5;
  required float diff_x = 6;
  required float diff_y = 7;
  required float slope_radian = 8;
  required float intercept = 9;
  required float speed = 10;
  required float slope = 11;
}

message Geometry_Info {
  // Field length (distance between goal lines) in mm
  required int32 field_length = 1;
  // Field width (distance between touch lines) in mm
  required int32 field_width = 2;
  // Goal width (distance between inner edges of goal posts) in mm
  required int32 goal_width = 3;
  // Goal depth (distance from outer goal line edge to inner goal back) in mm
  required int32 goal_depth = 4;
  // Boundary width (distance from touch/goal line centers to boundary walls) in mm
  required int32 boundary_width = 5;
  // Depth of the penalty/defense area (measured between line centers) in mm
  optional int32 penalty_area_depth = 6;
  // Width of the penalty/defense area (measured between line centers) in mm
  optional int32 penalty_area_width = 7;
  // Radius of the center circle (measured between line centers) in mm
  optional int32 center_circle_radius = 8;
  // Thickness/width of the lines on the field in mm
  optional int32 line_thickness = 9;
  // Distance between the goal center and the center of the penalty mark in mm
  optional int32 goal_center_to_penalty_mark = 10;
  // Goal height in mm
  optional int32 goal_height = 11;
  // Ball radius in mm (note that this is a float type to represent sub-mm precision)
  optional float ball_radius = 12;
  // Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)
  optional float max_robot_radius = 13;

  required float goal_x = 14;
  required float goal_y = 15;
}

message Referee_Info {
    // These are the "fine" states of play on the field.
    enum Command {
        // All robots should completely stop moving.
        HALT = 0;
        // Robots must keep 50 cm from the ball.
        STOP = 1;
        // A prepared kickoff or penalty may now be taken.
        NORMAL_START = 2;
        // The ball is dropped and free for either team.
        FORCE_START = 3;
        // The yellow team may move into kickoff position.
        PREPARE_KICKOFF_YELLOW = 4;
        // The blue team may move into kickoff position.
        PREPARE_KICKOFF_BLUE = 5;
        // The yellow team may move into penalty position.
        PREPARE_PENALTY_YELLOW = 6;
        // The blue team may move into penalty position.
        PREPARE_PENALTY_BLUE = 7;
        // The yellow team may take a direct free kick.
        DIRECT_FREE_YELLOW = 8;
        // The blue team may take a direct free kick.
        DIRECT_FREE_BLUE = 9;
        // The yellow team may take an indirect free kick.
        INDIRECT_FREE_YELLOW = 10;
        // The blue team may take an indirect free kick.
        INDIRECT_FREE_BLUE = 11;
        // The yellow team is currently in a timeout.
        TIMEOUT_YELLOW = 12;
        // The blue team is currently in a timeout.
        TIMEOUT_BLUE = 13;
        // The yellow team just scored a goal.
        // For information only.
        // For rules compliance, teams must treat as STOP.
        // Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
        GOAL_YELLOW = 14 [deprecated = true];
        // The blue team just scored a goal. See also GOAL_YELLOW.
        GOAL_BLUE = 15 [deprecated = true];
        // Equivalent to STOP, but the yellow team must pick up the ball and
        // drop it in the Designated Position.
        BALL_PLACEMENT_YELLOW = 16;
        // Equivalent to STOP, but the blue team must pick up the ball and drop
        // it in the Designated Position.
        BALL_PLACEMENT_BLUE = 17;
    }
    required Command command = 1;

    message TeamInfo {
        // The team's name (empty string if operator has not typed anything).
        required string name = 1;
        // The number of goals scored by the team during normal play and overtime.
        required uint32 score = 2;
        // The number of red cards issued to the team since the beginning of the game.
        required uint32 red_cards = 3;
        // The amount of time (in microseconds) left on each yellow card issued to the team.
        // If no yellow cards are issued, this array has no elements.
        // Otherwise, times are ordered from smallest to largest.
        repeated uint32 yellow_card_times = 4 [packed = true];
        // The total number of yellow cards ever issued to the team.
        required uint32 yellow_cards = 5;
        // The number of timeouts this team can still call.
        // If in a timeout right now, that timeout is excluded.
        required uint32 timeouts = 6;
        // The number of microseconds of timeout this team can use.
        required uint32 timeout_time = 7;
        // The pattern number of this team's goalkeeper.
        required uint32 goalkeeper = 8;
        // The total number of countable fouls that act towards yellow cards
        optional uint32 foul_counter = 9;
        // The number of consecutive ball placement failures of this team
        optional uint32 ball_placement_failures = 10;
        // Indicate if the team is able and allowed to place the ball
        optional bool can_place_ball = 12;
        // The maximum number of bots allowed on the field based on division and cards
        optional uint32 max_allowed_bots = 13;
        // The team has submitted an intent to substitute one or more robots at the next chance
        optional bool bot_substitution_intent = 14;
        // Indicate if the team reached the maximum allowed ball placement failures and is thus not allowed to place the ball anymore
        optional bool ball_placement_failures_reached = 15;
    }
    required TeamInfo teaminfo_our = 2;
    required TeamInfo teaminfo_their = 3;

    // These are the "coarse" stages of the game.
    enum Stage {
        // The first half is about to start.
        // A kickoff is called within this stage.
        // This stage ends with the NORMAL_START.
        NORMAL_FIRST_HALF_PRE = 0;
        // The first half of the normal game, before half time.
        NORMAL_FIRST_HALF = 1;
        // Half time between first and second halves.
        NORMAL_HALF_TIME = 2;
        // The second half is about to start.
        // A kickoff is called within this stage.
        // This stage ends with the NORMAL_START.
        NORMAL_SECOND_HALF_PRE = 3;
        // The second half of the normal game, after half time.
        NORMAL_SECOND_HALF = 4;
        // The break before extra time.
        EXTRA_TIME_BREAK = 5;
        // The first half of extra time is about to start.
        // A kickoff is called within this stage.
        // This stage ends with the NORMAL_START.
        EXTRA_FIRST_HALF_PRE = 6;
        // The first half of extra time.
        EXTRA_FIRST_HALF = 7;
        // Half time between first and second extra halves.
        EXTRA_HALF_TIME = 8;
        // The second half of extra time is about to start.
        // A kickoff is called within this stage.
        // This stage ends with the NORMAL_START.
        EXTRA_SECOND_HALF_PRE = 9;
        // The second half of extra time.
        EXTRA_SECOND_HALF = 10;
        // The break before penalty shootout.
        PENALTY_SHOOTOUT_BREAK = 11;
        // The penalty shootout.
        PENALTY_SHOOTOUT = 12;
        // The game is over.
        POST_GAME = 13;
    }
    required Stage stage = 4;

    required uint32 yellow_cards = 5;
    required uint32 red_cards = 6;
    repeated GameEvent event = 7;
    optional Command pre_command = 8;
    optional Command next_command = 9;
    optional float ball_placement_x = 10;
    optional float ball_placement_y = 11;
}

message RobotIP_Infos {
    required uint32 robot_id = 1;
    required string ip = 2;
}

message Other_Infos {
    required int32 num_of_cameras = 1;
    required int32 num_of_our_robots = 2;
    required int32 num_of_enemy_robots = 3;
    required float secperframe = 4;
    required bool is_vision_recv = 5;
    required int32 attack_direction = 6;
    required bool is_ball_moving = 7;
}

message RacoonMW_Packet {
    repeated Robot_Infos our_robots = 1;
    repeated Robot_Infos enemy_robots = 2;
    required Geometry_Info geometry = 3;
    required Ball_Info ball = 4;
    required Referee_Info referee = 5;
    repeated RobotIP_Infos robot_ips = 6;
    required Other_Infos info = 7;
    repeated GameEvent event = 8;
}
