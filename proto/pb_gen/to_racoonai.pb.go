// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.1
// source: to_racoonai.proto

package pb_gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These are the "fine" states of play on the field.
type Referee_Info_Command int32

const (
	// All robots should completely stop moving.
	Referee_Info_HALT Referee_Info_Command = 0
	// Robots must keep 50 cm from the ball.
	Referee_Info_STOP Referee_Info_Command = 1
	// A prepared kickoff or penalty may now be taken.
	Referee_Info_NORMAL_START Referee_Info_Command = 2
	// The ball is dropped and free for either team.
	Referee_Info_FORCE_START Referee_Info_Command = 3
	// The yellow team may move into kickoff position.
	Referee_Info_PREPARE_KICKOFF_YELLOW Referee_Info_Command = 4
	// The blue team may move into kickoff position.
	Referee_Info_PREPARE_KICKOFF_BLUE Referee_Info_Command = 5
	// The yellow team may move into penalty position.
	Referee_Info_PREPARE_PENALTY_YELLOW Referee_Info_Command = 6
	// The blue team may move into penalty position.
	Referee_Info_PREPARE_PENALTY_BLUE Referee_Info_Command = 7
	// The yellow team may take a direct free kick.
	Referee_Info_DIRECT_FREE_YELLOW Referee_Info_Command = 8
	// The blue team may take a direct free kick.
	Referee_Info_DIRECT_FREE_BLUE Referee_Info_Command = 9
	// The yellow team may take an indirect free kick.
	Referee_Info_INDIRECT_FREE_YELLOW Referee_Info_Command = 10
	// The blue team may take an indirect free kick.
	Referee_Info_INDIRECT_FREE_BLUE Referee_Info_Command = 11
	// The yellow team is currently in a timeout.
	Referee_Info_TIMEOUT_YELLOW Referee_Info_Command = 12
	// The blue team is currently in a timeout.
	Referee_Info_TIMEOUT_BLUE Referee_Info_Command = 13
	// The yellow team just scored a goal.
	// For information only.
	// For rules compliance, teams must treat as STOP.
	// Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
	//
	// Deprecated: Marked as deprecated in to_racoonai.proto.
	Referee_Info_GOAL_YELLOW Referee_Info_Command = 14
	// The blue team just scored a goal. See also GOAL_YELLOW.
	//
	// Deprecated: Marked as deprecated in to_racoonai.proto.
	Referee_Info_GOAL_BLUE Referee_Info_Command = 15
	// Equivalent to STOP, but the yellow team must pick up the ball and
	// drop it in the Designated Position.
	Referee_Info_BALL_PLACEMENT_YELLOW Referee_Info_Command = 16
	// Equivalent to STOP, but the blue team must pick up the ball and drop
	// it in the Designated Position.
	Referee_Info_BALL_PLACEMENT_BLUE Referee_Info_Command = 17
)

// Enum value maps for Referee_Info_Command.
var (
	Referee_Info_Command_name = map[int32]string{
		0:  "HALT",
		1:  "STOP",
		2:  "NORMAL_START",
		3:  "FORCE_START",
		4:  "PREPARE_KICKOFF_YELLOW",
		5:  "PREPARE_KICKOFF_BLUE",
		6:  "PREPARE_PENALTY_YELLOW",
		7:  "PREPARE_PENALTY_BLUE",
		8:  "DIRECT_FREE_YELLOW",
		9:  "DIRECT_FREE_BLUE",
		10: "INDIRECT_FREE_YELLOW",
		11: "INDIRECT_FREE_BLUE",
		12: "TIMEOUT_YELLOW",
		13: "TIMEOUT_BLUE",
		14: "GOAL_YELLOW",
		15: "GOAL_BLUE",
		16: "BALL_PLACEMENT_YELLOW",
		17: "BALL_PLACEMENT_BLUE",
	}
	Referee_Info_Command_value = map[string]int32{
		"HALT":                   0,
		"STOP":                   1,
		"NORMAL_START":           2,
		"FORCE_START":            3,
		"PREPARE_KICKOFF_YELLOW": 4,
		"PREPARE_KICKOFF_BLUE":   5,
		"PREPARE_PENALTY_YELLOW": 6,
		"PREPARE_PENALTY_BLUE":   7,
		"DIRECT_FREE_YELLOW":     8,
		"DIRECT_FREE_BLUE":       9,
		"INDIRECT_FREE_YELLOW":   10,
		"INDIRECT_FREE_BLUE":     11,
		"TIMEOUT_YELLOW":         12,
		"TIMEOUT_BLUE":           13,
		"GOAL_YELLOW":            14,
		"GOAL_BLUE":              15,
		"BALL_PLACEMENT_YELLOW":  16,
		"BALL_PLACEMENT_BLUE":    17,
	}
)

func (x Referee_Info_Command) Enum() *Referee_Info_Command {
	p := new(Referee_Info_Command)
	*p = x
	return p
}

func (x Referee_Info_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referee_Info_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_to_racoonai_proto_enumTypes[0].Descriptor()
}

func (Referee_Info_Command) Type() protoreflect.EnumType {
	return &file_to_racoonai_proto_enumTypes[0]
}

func (x Referee_Info_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Referee_Info_Command) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Referee_Info_Command(num)
	return nil
}

// Deprecated: Use Referee_Info_Command.Descriptor instead.
func (Referee_Info_Command) EnumDescriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3, 0}
}

// These are the "coarse" stages of the game.
type Referee_Info_Stage int32

const (
	// The first half is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_NORMAL_FIRST_HALF_PRE Referee_Info_Stage = 0
	// The first half of the normal game, before half time.
	Referee_Info_NORMAL_FIRST_HALF Referee_Info_Stage = 1
	// Half time between first and second halves.
	Referee_Info_NORMAL_HALF_TIME Referee_Info_Stage = 2
	// The second half is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_NORMAL_SECOND_HALF_PRE Referee_Info_Stage = 3
	// The second half of the normal game, after half time.
	Referee_Info_NORMAL_SECOND_HALF Referee_Info_Stage = 4
	// The break before extra time.
	Referee_Info_EXTRA_TIME_BREAK Referee_Info_Stage = 5
	// The first half of extra time is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_EXTRA_FIRST_HALF_PRE Referee_Info_Stage = 6
	// The first half of extra time.
	Referee_Info_EXTRA_FIRST_HALF Referee_Info_Stage = 7
	// Half time between first and second extra halves.
	Referee_Info_EXTRA_HALF_TIME Referee_Info_Stage = 8
	// The second half of extra time is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_EXTRA_SECOND_HALF_PRE Referee_Info_Stage = 9
	// The second half of extra time.
	Referee_Info_EXTRA_SECOND_HALF Referee_Info_Stage = 10
	// The break before penalty shootout.
	Referee_Info_PENALTY_SHOOTOUT_BREAK Referee_Info_Stage = 11
	// The penalty shootout.
	Referee_Info_PENALTY_SHOOTOUT Referee_Info_Stage = 12
	// The game is over.
	Referee_Info_POST_GAME Referee_Info_Stage = 13
)

// Enum value maps for Referee_Info_Stage.
var (
	Referee_Info_Stage_name = map[int32]string{
		0:  "NORMAL_FIRST_HALF_PRE",
		1:  "NORMAL_FIRST_HALF",
		2:  "NORMAL_HALF_TIME",
		3:  "NORMAL_SECOND_HALF_PRE",
		4:  "NORMAL_SECOND_HALF",
		5:  "EXTRA_TIME_BREAK",
		6:  "EXTRA_FIRST_HALF_PRE",
		7:  "EXTRA_FIRST_HALF",
		8:  "EXTRA_HALF_TIME",
		9:  "EXTRA_SECOND_HALF_PRE",
		10: "EXTRA_SECOND_HALF",
		11: "PENALTY_SHOOTOUT_BREAK",
		12: "PENALTY_SHOOTOUT",
		13: "POST_GAME",
	}
	Referee_Info_Stage_value = map[string]int32{
		"NORMAL_FIRST_HALF_PRE":  0,
		"NORMAL_FIRST_HALF":      1,
		"NORMAL_HALF_TIME":       2,
		"NORMAL_SECOND_HALF_PRE": 3,
		"NORMAL_SECOND_HALF":     4,
		"EXTRA_TIME_BREAK":       5,
		"EXTRA_FIRST_HALF_PRE":   6,
		"EXTRA_FIRST_HALF":       7,
		"EXTRA_HALF_TIME":        8,
		"EXTRA_SECOND_HALF_PRE":  9,
		"EXTRA_SECOND_HALF":      10,
		"PENALTY_SHOOTOUT_BREAK": 11,
		"PENALTY_SHOOTOUT":       12,
		"POST_GAME":              13,
	}
)

func (x Referee_Info_Stage) Enum() *Referee_Info_Stage {
	p := new(Referee_Info_Stage)
	*p = x
	return p
}

func (x Referee_Info_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referee_Info_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_to_racoonai_proto_enumTypes[1].Descriptor()
}

func (Referee_Info_Stage) Type() protoreflect.EnumType {
	return &file_to_racoonai_proto_enumTypes[1]
}

func (x Referee_Info_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Referee_Info_Stage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Referee_Info_Stage(num)
	return nil
}

// Deprecated: Use Referee_Info_Stage.Descriptor instead.
func (Referee_Info_Stage) EnumDescriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3, 1}
}

type Robot_Infos struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RobotId                *uint32                `protobuf:"varint,1,req,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	X                      *float32               `protobuf:"fixed32,2,req,name=x" json:"x,omitempty"`
	Y                      *float32               `protobuf:"fixed32,3,req,name=y" json:"y,omitempty"`
	Theta                  *float32               `protobuf:"fixed32,4,req,name=theta" json:"theta,omitempty"`
	DistanceBallRobot      *float32               `protobuf:"fixed32,5,opt,name=distance_ball_robot,json=distanceBallRobot" json:"distance_ball_robot,omitempty"`
	RadianBallRobot        *float32               `protobuf:"fixed32,6,opt,name=radian_ball_robot,json=radianBallRobot" json:"radian_ball_robot,omitempty"`
	DiffX                  *float32               `protobuf:"fixed32,7,req,name=diff_x,json=diffX" json:"diff_x,omitempty"`
	DiffY                  *float32               `protobuf:"fixed32,8,req,name=diff_y,json=diffY" json:"diff_y,omitempty"`
	DiffTheta              *float32               `protobuf:"fixed32,9,req,name=diff_theta,json=diffTheta" json:"diff_theta,omitempty"`
	Speed                  *float32               `protobuf:"fixed32,10,req,name=speed" json:"speed,omitempty"`
	Slope                  *float32               `protobuf:"fixed32,11,req,name=slope" json:"slope,omitempty"`
	Intercept              *float32               `protobuf:"fixed32,12,req,name=intercept" json:"intercept,omitempty"`
	AngularVelocity        *float32               `protobuf:"fixed32,13,req,name=angular_velocity,json=angularVelocity" json:"angular_velocity,omitempty"`
	Visible                *bool                  `protobuf:"varint,14,req,name=visible" json:"visible,omitempty"`
	IsDetectPhotoSensor    *bool                  `protobuf:"varint,15,opt,name=is_detect_photo_sensor,json=isDetectPhotoSensor" json:"is_detect_photo_sensor,omitempty"`
	IsNewDribbler          *bool                  `protobuf:"varint,16,opt,name=is_new_dribbler,json=isNewDribbler" json:"is_new_dribbler,omitempty"`
	IsDetectDribblerSensor *bool                  `protobuf:"varint,17,opt,name=is_detect_dribbler_sensor,json=isDetectDribblerSensor" json:"is_detect_dribbler_sensor,omitempty"`
	Online                 *bool                  `protobuf:"varint,18,opt,name=online" json:"online,omitempty"`
	BatteryVoltage         *float32               `protobuf:"fixed32,19,opt,name=battery_voltage,json=batteryVoltage" json:"battery_voltage,omitempty"`
	CapPower               *uint32                `protobuf:"varint,20,opt,name=cap_power,json=capPower" json:"cap_power,omitempty"`
	BallCameraX            *float32               `protobuf:"fixed32,21,opt,name=ball_camera_x,json=ballCameraX" json:"ball_camera_x,omitempty"`
	BallCameraY            *float32               `protobuf:"fixed32,22,opt,name=ball_camera_y,json=ballCameraY" json:"ball_camera_y,omitempty"`
	IsBallExistOnCamera    *bool                  `protobuf:"varint,23,opt,name=is_ball_exist_on_camera,json=isBallExistOnCamera" json:"is_ball_exist_on_camera,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Robot_Infos) Reset() {
	*x = Robot_Infos{}
	mi := &file_to_racoonai_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Robot_Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Robot_Infos) ProtoMessage() {}

func (x *Robot_Infos) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Robot_Infos.ProtoReflect.Descriptor instead.
func (*Robot_Infos) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{0}
}

func (x *Robot_Infos) GetRobotId() uint32 {
	if x != nil && x.RobotId != nil {
		return *x.RobotId
	}
	return 0
}

func (x *Robot_Infos) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Robot_Infos) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Robot_Infos) GetTheta() float32 {
	if x != nil && x.Theta != nil {
		return *x.Theta
	}
	return 0
}

func (x *Robot_Infos) GetDistanceBallRobot() float32 {
	if x != nil && x.DistanceBallRobot != nil {
		return *x.DistanceBallRobot
	}
	return 0
}

func (x *Robot_Infos) GetRadianBallRobot() float32 {
	if x != nil && x.RadianBallRobot != nil {
		return *x.RadianBallRobot
	}
	return 0
}

func (x *Robot_Infos) GetDiffX() float32 {
	if x != nil && x.DiffX != nil {
		return *x.DiffX
	}
	return 0
}

func (x *Robot_Infos) GetDiffY() float32 {
	if x != nil && x.DiffY != nil {
		return *x.DiffY
	}
	return 0
}

func (x *Robot_Infos) GetDiffTheta() float32 {
	if x != nil && x.DiffTheta != nil {
		return *x.DiffTheta
	}
	return 0
}

func (x *Robot_Infos) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Robot_Infos) GetSlope() float32 {
	if x != nil && x.Slope != nil {
		return *x.Slope
	}
	return 0
}

func (x *Robot_Infos) GetIntercept() float32 {
	if x != nil && x.Intercept != nil {
		return *x.Intercept
	}
	return 0
}

func (x *Robot_Infos) GetAngularVelocity() float32 {
	if x != nil && x.AngularVelocity != nil {
		return *x.AngularVelocity
	}
	return 0
}

func (x *Robot_Infos) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *Robot_Infos) GetIsDetectPhotoSensor() bool {
	if x != nil && x.IsDetectPhotoSensor != nil {
		return *x.IsDetectPhotoSensor
	}
	return false
}

func (x *Robot_Infos) GetIsNewDribbler() bool {
	if x != nil && x.IsNewDribbler != nil {
		return *x.IsNewDribbler
	}
	return false
}

func (x *Robot_Infos) GetIsDetectDribblerSensor() bool {
	if x != nil && x.IsDetectDribblerSensor != nil {
		return *x.IsDetectDribblerSensor
	}
	return false
}

func (x *Robot_Infos) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *Robot_Infos) GetBatteryVoltage() float32 {
	if x != nil && x.BatteryVoltage != nil {
		return *x.BatteryVoltage
	}
	return 0
}

func (x *Robot_Infos) GetCapPower() uint32 {
	if x != nil && x.CapPower != nil {
		return *x.CapPower
	}
	return 0
}

func (x *Robot_Infos) GetBallCameraX() float32 {
	if x != nil && x.BallCameraX != nil {
		return *x.BallCameraX
	}
	return 0
}

func (x *Robot_Infos) GetBallCameraY() float32 {
	if x != nil && x.BallCameraY != nil {
		return *x.BallCameraY
	}
	return 0
}

func (x *Robot_Infos) GetIsBallExistOnCamera() bool {
	if x != nil && x.IsBallExistOnCamera != nil {
		return *x.IsBallExistOnCamera
	}
	return false
}

type Ball_Info struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilteredX     *float32               `protobuf:"fixed32,1,req,name=filtered_x,json=filteredX" json:"filtered_x,omitempty"`
	FilteredY     *float32               `protobuf:"fixed32,2,req,name=filtered_y,json=filteredY" json:"filtered_y,omitempty"`
	X             *float32               `protobuf:"fixed32,3,req,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,4,req,name=y" json:"y,omitempty"`
	Z             *float32               `protobuf:"fixed32,5,req,name=z" json:"z,omitempty"`
	DiffX         *float32               `protobuf:"fixed32,6,req,name=diff_x,json=diffX" json:"diff_x,omitempty"`
	DiffY         *float32               `protobuf:"fixed32,7,req,name=diff_y,json=diffY" json:"diff_y,omitempty"`
	SlopeRadian   *float32               `protobuf:"fixed32,8,req,name=slope_radian,json=slopeRadian" json:"slope_radian,omitempty"`
	Intercept     *float32               `protobuf:"fixed32,9,req,name=intercept" json:"intercept,omitempty"`
	Speed         *float32               `protobuf:"fixed32,10,req,name=speed" json:"speed,omitempty"`
	Slope         *float32               `protobuf:"fixed32,11,req,name=slope" json:"slope,omitempty"`
	IsVisible     *bool                  `protobuf:"varint,12,req,name=is_visible,json=isVisible" json:"is_visible,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ball_Info) Reset() {
	*x = Ball_Info{}
	mi := &file_to_racoonai_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ball_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ball_Info) ProtoMessage() {}

func (x *Ball_Info) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ball_Info.ProtoReflect.Descriptor instead.
func (*Ball_Info) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{1}
}

func (x *Ball_Info) GetFilteredX() float32 {
	if x != nil && x.FilteredX != nil {
		return *x.FilteredX
	}
	return 0
}

func (x *Ball_Info) GetFilteredY() float32 {
	if x != nil && x.FilteredY != nil {
		return *x.FilteredY
	}
	return 0
}

func (x *Ball_Info) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Ball_Info) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Ball_Info) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Ball_Info) GetDiffX() float32 {
	if x != nil && x.DiffX != nil {
		return *x.DiffX
	}
	return 0
}

func (x *Ball_Info) GetDiffY() float32 {
	if x != nil && x.DiffY != nil {
		return *x.DiffY
	}
	return 0
}

func (x *Ball_Info) GetSlopeRadian() float32 {
	if x != nil && x.SlopeRadian != nil {
		return *x.SlopeRadian
	}
	return 0
}

func (x *Ball_Info) GetIntercept() float32 {
	if x != nil && x.Intercept != nil {
		return *x.Intercept
	}
	return 0
}

func (x *Ball_Info) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Ball_Info) GetSlope() float32 {
	if x != nil && x.Slope != nil {
		return *x.Slope
	}
	return 0
}

func (x *Ball_Info) GetIsVisible() bool {
	if x != nil && x.IsVisible != nil {
		return *x.IsVisible
	}
	return false
}

type Geometry_Info struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Field length (distance between goal lines) in mm
	FieldLength *int32 `protobuf:"varint,1,req,name=field_length,json=fieldLength" json:"field_length,omitempty"`
	// Field width (distance between touch lines) in mm
	FieldWidth *int32 `protobuf:"varint,2,req,name=field_width,json=fieldWidth" json:"field_width,omitempty"`
	// Goal width (distance between inner edges of goal posts) in mm
	GoalWidth *int32 `protobuf:"varint,3,req,name=goal_width,json=goalWidth" json:"goal_width,omitempty"`
	// Goal depth (distance from outer goal line edge to inner goal back) in mm
	GoalDepth *int32 `protobuf:"varint,4,req,name=goal_depth,json=goalDepth" json:"goal_depth,omitempty"`
	// Boundary width (distance from touch/goal line centers to boundary walls) in mm
	BoundaryWidth *int32 `protobuf:"varint,5,req,name=boundary_width,json=boundaryWidth" json:"boundary_width,omitempty"`
	// Depth of the penalty/defense area (measured between line centers) in mm
	PenaltyAreaDepth *int32 `protobuf:"varint,6,opt,name=penalty_area_depth,json=penaltyAreaDepth" json:"penalty_area_depth,omitempty"`
	// Width of the penalty/defense area (measured between line centers) in mm
	PenaltyAreaWidth *int32 `protobuf:"varint,7,opt,name=penalty_area_width,json=penaltyAreaWidth" json:"penalty_area_width,omitempty"`
	// Radius of the center circle (measured between line centers) in mm
	CenterCircleRadius *int32 `protobuf:"varint,8,opt,name=center_circle_radius,json=centerCircleRadius" json:"center_circle_radius,omitempty"`
	// Thickness/width of the lines on the field in mm
	LineThickness *int32 `protobuf:"varint,9,opt,name=line_thickness,json=lineThickness" json:"line_thickness,omitempty"`
	// Distance between the goal center and the center of the penalty mark in mm
	GoalCenterToPenaltyMark *int32 `protobuf:"varint,10,opt,name=goal_center_to_penalty_mark,json=goalCenterToPenaltyMark" json:"goal_center_to_penalty_mark,omitempty"`
	// Goal height in mm
	GoalHeight *int32 `protobuf:"varint,11,opt,name=goal_height,json=goalHeight" json:"goal_height,omitempty"`
	// Ball radius in mm (note that this is a float type to represent sub-mm precision)
	BallRadius *float32 `protobuf:"fixed32,12,opt,name=ball_radius,json=ballRadius" json:"ball_radius,omitempty"`
	// Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)
	MaxRobotRadius *float32 `protobuf:"fixed32,13,opt,name=max_robot_radius,json=maxRobotRadius" json:"max_robot_radius,omitempty"`
	GoalX          *float32 `protobuf:"fixed32,14,req,name=goal_x,json=goalX" json:"goal_x,omitempty"`
	GoalY          *float32 `protobuf:"fixed32,15,req,name=goal_y,json=goalY" json:"goal_y,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Geometry_Info) Reset() {
	*x = Geometry_Info{}
	mi := &file_to_racoonai_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Geometry_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geometry_Info) ProtoMessage() {}

func (x *Geometry_Info) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geometry_Info.ProtoReflect.Descriptor instead.
func (*Geometry_Info) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{2}
}

func (x *Geometry_Info) GetFieldLength() int32 {
	if x != nil && x.FieldLength != nil {
		return *x.FieldLength
	}
	return 0
}

func (x *Geometry_Info) GetFieldWidth() int32 {
	if x != nil && x.FieldWidth != nil {
		return *x.FieldWidth
	}
	return 0
}

func (x *Geometry_Info) GetGoalWidth() int32 {
	if x != nil && x.GoalWidth != nil {
		return *x.GoalWidth
	}
	return 0
}

func (x *Geometry_Info) GetGoalDepth() int32 {
	if x != nil && x.GoalDepth != nil {
		return *x.GoalDepth
	}
	return 0
}

func (x *Geometry_Info) GetBoundaryWidth() int32 {
	if x != nil && x.BoundaryWidth != nil {
		return *x.BoundaryWidth
	}
	return 0
}

func (x *Geometry_Info) GetPenaltyAreaDepth() int32 {
	if x != nil && x.PenaltyAreaDepth != nil {
		return *x.PenaltyAreaDepth
	}
	return 0
}

func (x *Geometry_Info) GetPenaltyAreaWidth() int32 {
	if x != nil && x.PenaltyAreaWidth != nil {
		return *x.PenaltyAreaWidth
	}
	return 0
}

func (x *Geometry_Info) GetCenterCircleRadius() int32 {
	if x != nil && x.CenterCircleRadius != nil {
		return *x.CenterCircleRadius
	}
	return 0
}

func (x *Geometry_Info) GetLineThickness() int32 {
	if x != nil && x.LineThickness != nil {
		return *x.LineThickness
	}
	return 0
}

func (x *Geometry_Info) GetGoalCenterToPenaltyMark() int32 {
	if x != nil && x.GoalCenterToPenaltyMark != nil {
		return *x.GoalCenterToPenaltyMark
	}
	return 0
}

func (x *Geometry_Info) GetGoalHeight() int32 {
	if x != nil && x.GoalHeight != nil {
		return *x.GoalHeight
	}
	return 0
}

func (x *Geometry_Info) GetBallRadius() float32 {
	if x != nil && x.BallRadius != nil {
		return *x.BallRadius
	}
	return 0
}

func (x *Geometry_Info) GetMaxRobotRadius() float32 {
	if x != nil && x.MaxRobotRadius != nil {
		return *x.MaxRobotRadius
	}
	return 0
}

func (x *Geometry_Info) GetGoalX() float32 {
	if x != nil && x.GoalX != nil {
		return *x.GoalX
	}
	return 0
}

func (x *Geometry_Info) GetGoalY() float32 {
	if x != nil && x.GoalY != nil {
		return *x.GoalY
	}
	return 0
}

type Referee_Info struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Command                    *Referee_Info_Command  `protobuf:"varint,1,req,name=command,enum=Referee_Info_Command" json:"command,omitempty"`
	TeaminfoOur                *Referee_Info_TeamInfo `protobuf:"bytes,2,req,name=teaminfo_our,json=teaminfoOur" json:"teaminfo_our,omitempty"`
	TeaminfoTheir              *Referee_Info_TeamInfo `protobuf:"bytes,3,req,name=teaminfo_their,json=teaminfoTheir" json:"teaminfo_their,omitempty"`
	Stage                      *Referee_Info_Stage    `protobuf:"varint,4,req,name=stage,enum=Referee_Info_Stage" json:"stage,omitempty"`
	YellowCards                *uint32                `protobuf:"varint,5,req,name=yellow_cards,json=yellowCards" json:"yellow_cards,omitempty"`
	RedCards                   *uint32                `protobuf:"varint,6,req,name=red_cards,json=redCards" json:"red_cards,omitempty"`
	OurGoalkeeperId            *uint32                `protobuf:"varint,7,req,name=our_goalkeeper_id,json=ourGoalkeeperId" json:"our_goalkeeper_id,omitempty"`
	Event                      []*GameEvent           `protobuf:"bytes,8,rep,name=event" json:"event,omitempty"`
	PreCommand                 *Referee_Info_Command  `protobuf:"varint,9,opt,name=pre_command,json=preCommand,enum=Referee_Info_Command" json:"pre_command,omitempty"`
	NextCommand                *Referee_Info_Command  `protobuf:"varint,10,opt,name=next_command,json=nextCommand,enum=Referee_Info_Command" json:"next_command,omitempty"`
	BallPlacementX             *float32               `protobuf:"fixed32,11,opt,name=ball_placement_x,json=ballPlacementX" json:"ball_placement_x,omitempty"`
	BallPlacementY             *float32               `protobuf:"fixed32,12,opt,name=ball_placement_y,json=ballPlacementY" json:"ball_placement_y,omitempty"`
	CurrentActionTimeRemaining *int32                 `protobuf:"varint,13,opt,name=current_action_time_remaining,json=currentActionTimeRemaining" json:"current_action_time_remaining,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Referee_Info) Reset() {
	*x = Referee_Info{}
	mi := &file_to_racoonai_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Referee_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee_Info) ProtoMessage() {}

func (x *Referee_Info) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee_Info.ProtoReflect.Descriptor instead.
func (*Referee_Info) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3}
}

func (x *Referee_Info) GetCommand() Referee_Info_Command {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return Referee_Info_HALT
}

func (x *Referee_Info) GetTeaminfoOur() *Referee_Info_TeamInfo {
	if x != nil {
		return x.TeaminfoOur
	}
	return nil
}

func (x *Referee_Info) GetTeaminfoTheir() *Referee_Info_TeamInfo {
	if x != nil {
		return x.TeaminfoTheir
	}
	return nil
}

func (x *Referee_Info) GetStage() Referee_Info_Stage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Referee_Info_NORMAL_FIRST_HALF_PRE
}

func (x *Referee_Info) GetYellowCards() uint32 {
	if x != nil && x.YellowCards != nil {
		return *x.YellowCards
	}
	return 0
}

func (x *Referee_Info) GetRedCards() uint32 {
	if x != nil && x.RedCards != nil {
		return *x.RedCards
	}
	return 0
}

func (x *Referee_Info) GetOurGoalkeeperId() uint32 {
	if x != nil && x.OurGoalkeeperId != nil {
		return *x.OurGoalkeeperId
	}
	return 0
}

func (x *Referee_Info) GetEvent() []*GameEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Referee_Info) GetPreCommand() Referee_Info_Command {
	if x != nil && x.PreCommand != nil {
		return *x.PreCommand
	}
	return Referee_Info_HALT
}

func (x *Referee_Info) GetNextCommand() Referee_Info_Command {
	if x != nil && x.NextCommand != nil {
		return *x.NextCommand
	}
	return Referee_Info_HALT
}

func (x *Referee_Info) GetBallPlacementX() float32 {
	if x != nil && x.BallPlacementX != nil {
		return *x.BallPlacementX
	}
	return 0
}

func (x *Referee_Info) GetBallPlacementY() float32 {
	if x != nil && x.BallPlacementY != nil {
		return *x.BallPlacementY
	}
	return 0
}

func (x *Referee_Info) GetCurrentActionTimeRemaining() int32 {
	if x != nil && x.CurrentActionTimeRemaining != nil {
		return *x.CurrentActionTimeRemaining
	}
	return 0
}

type RobotIP_Infos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RobotId       *uint32                `protobuf:"varint,1,req,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	Ip            *string                `protobuf:"bytes,2,req,name=ip" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RobotIP_Infos) Reset() {
	*x = RobotIP_Infos{}
	mi := &file_to_racoonai_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RobotIP_Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotIP_Infos) ProtoMessage() {}

func (x *RobotIP_Infos) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotIP_Infos.ProtoReflect.Descriptor instead.
func (*RobotIP_Infos) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{4}
}

func (x *RobotIP_Infos) GetRobotId() uint32 {
	if x != nil && x.RobotId != nil {
		return *x.RobotId
	}
	return 0
}

func (x *RobotIP_Infos) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

type Other_Infos struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	NumOfCameras           *int32                 `protobuf:"varint,1,req,name=num_of_cameras,json=numOfCameras" json:"num_of_cameras,omitempty"`
	NumOfOurRobots         *int32                 `protobuf:"varint,2,req,name=num_of_our_robots,json=numOfOurRobots" json:"num_of_our_robots,omitempty"`
	NumOfEnemyRobots       *int32                 `protobuf:"varint,3,req,name=num_of_enemy_robots,json=numOfEnemyRobots" json:"num_of_enemy_robots,omitempty"`
	Secperframe            *float32               `protobuf:"fixed32,4,req,name=secperframe" json:"secperframe,omitempty"`
	IsVisionRecv           *bool                  `protobuf:"varint,5,req,name=is_vision_recv,json=isVisionRecv" json:"is_vision_recv,omitempty"`
	AttackDirection        *int32                 `protobuf:"varint,6,req,name=attack_direction,json=attackDirection" json:"attack_direction,omitempty"`
	IsBallMoving           *bool                  `protobuf:"varint,7,req,name=is_ball_moving,json=isBallMoving" json:"is_ball_moving,omitempty"`
	IsReal                 *bool                  `protobuf:"varint,8,req,name=is_real,json=isReal" json:"is_real,omitempty"`
	IsTeamYellow           *bool                  `protobuf:"varint,9,req,name=is_team_yellow,json=isTeamYellow" json:"is_team_yellow,omitempty"`
	IsHalfCourt            *bool                  `protobuf:"varint,10,req,name=is_half_court,json=isHalfCourt" json:"is_half_court,omitempty"`
	IsMatchmode            *bool                  `protobuf:"varint,11,req,name=is_matchmode,json=isMatchmode" json:"is_matchmode,omitempty"`                                      // true: ignore mw option(simmode, halfcourt, teamcolor)
	GrsimCommandListenPort *uint32                `protobuf:"varint,12,req,name=grsim_command_listen_port,json=grsimCommandListenPort" json:"grsim_command_listen_port,omitempty"` // default 20011
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Other_Infos) Reset() {
	*x = Other_Infos{}
	mi := &file_to_racoonai_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Other_Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Other_Infos) ProtoMessage() {}

func (x *Other_Infos) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Other_Infos.ProtoReflect.Descriptor instead.
func (*Other_Infos) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{5}
}

func (x *Other_Infos) GetNumOfCameras() int32 {
	if x != nil && x.NumOfCameras != nil {
		return *x.NumOfCameras
	}
	return 0
}

func (x *Other_Infos) GetNumOfOurRobots() int32 {
	if x != nil && x.NumOfOurRobots != nil {
		return *x.NumOfOurRobots
	}
	return 0
}

func (x *Other_Infos) GetNumOfEnemyRobots() int32 {
	if x != nil && x.NumOfEnemyRobots != nil {
		return *x.NumOfEnemyRobots
	}
	return 0
}

func (x *Other_Infos) GetSecperframe() float32 {
	if x != nil && x.Secperframe != nil {
		return *x.Secperframe
	}
	return 0
}

func (x *Other_Infos) GetIsVisionRecv() bool {
	if x != nil && x.IsVisionRecv != nil {
		return *x.IsVisionRecv
	}
	return false
}

func (x *Other_Infos) GetAttackDirection() int32 {
	if x != nil && x.AttackDirection != nil {
		return *x.AttackDirection
	}
	return 0
}

func (x *Other_Infos) GetIsBallMoving() bool {
	if x != nil && x.IsBallMoving != nil {
		return *x.IsBallMoving
	}
	return false
}

func (x *Other_Infos) GetIsReal() bool {
	if x != nil && x.IsReal != nil {
		return *x.IsReal
	}
	return false
}

func (x *Other_Infos) GetIsTeamYellow() bool {
	if x != nil && x.IsTeamYellow != nil {
		return *x.IsTeamYellow
	}
	return false
}

func (x *Other_Infos) GetIsHalfCourt() bool {
	if x != nil && x.IsHalfCourt != nil {
		return *x.IsHalfCourt
	}
	return false
}

func (x *Other_Infos) GetIsMatchmode() bool {
	if x != nil && x.IsMatchmode != nil {
		return *x.IsMatchmode
	}
	return false
}

func (x *Other_Infos) GetGrsimCommandListenPort() uint32 {
	if x != nil && x.GrsimCommandListenPort != nil {
		return *x.GrsimCommandListenPort
	}
	return 0
}

type RacoonMW_Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OurRobots     []*Robot_Infos         `protobuf:"bytes,1,rep,name=our_robots,json=ourRobots" json:"our_robots,omitempty"`
	EnemyRobots   []*Robot_Infos         `protobuf:"bytes,2,rep,name=enemy_robots,json=enemyRobots" json:"enemy_robots,omitempty"`
	Geometry      *Geometry_Info         `protobuf:"bytes,3,req,name=geometry" json:"geometry,omitempty"`
	Ball          *Ball_Info             `protobuf:"bytes,4,req,name=ball" json:"ball,omitempty"`
	Referee       *Referee_Info          `protobuf:"bytes,5,req,name=referee" json:"referee,omitempty"`
	RobotIps      []*RobotIP_Infos       `protobuf:"bytes,6,rep,name=robot_ips,json=robotIps" json:"robot_ips,omitempty"`
	Info          *Other_Infos           `protobuf:"bytes,7,req,name=info" json:"info,omitempty"`
	Event         []*GameEvent           `protobuf:"bytes,8,rep,name=event" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RacoonMW_Packet) Reset() {
	*x = RacoonMW_Packet{}
	mi := &file_to_racoonai_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RacoonMW_Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacoonMW_Packet) ProtoMessage() {}

func (x *RacoonMW_Packet) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacoonMW_Packet.ProtoReflect.Descriptor instead.
func (*RacoonMW_Packet) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{6}
}

func (x *RacoonMW_Packet) GetOurRobots() []*Robot_Infos {
	if x != nil {
		return x.OurRobots
	}
	return nil
}

func (x *RacoonMW_Packet) GetEnemyRobots() []*Robot_Infos {
	if x != nil {
		return x.EnemyRobots
	}
	return nil
}

func (x *RacoonMW_Packet) GetGeometry() *Geometry_Info {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *RacoonMW_Packet) GetBall() *Ball_Info {
	if x != nil {
		return x.Ball
	}
	return nil
}

func (x *RacoonMW_Packet) GetReferee() *Referee_Info {
	if x != nil {
		return x.Referee
	}
	return nil
}

func (x *RacoonMW_Packet) GetRobotIps() []*RobotIP_Infos {
	if x != nil {
		return x.RobotIps
	}
	return nil
}

func (x *RacoonMW_Packet) GetInfo() *Other_Infos {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RacoonMW_Packet) GetEvent() []*GameEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type Referee_Info_TeamInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The team's name (empty string if operator has not typed anything).
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The number of goals scored by the team during normal play and overtime.
	Score *uint32 `protobuf:"varint,2,req,name=score" json:"score,omitempty"`
	// The number of red cards issued to the team since the beginning of the game.
	RedCards *uint32 `protobuf:"varint,3,req,name=red_cards,json=redCards" json:"red_cards,omitempty"`
	// The amount of time (in microseconds) left on each yellow card issued to the team.
	// If no yellow cards are issued, this array has no elements.
	// Otherwise, times are ordered from smallest to largest.
	YellowCardTimes []uint32 `protobuf:"varint,4,rep,packed,name=yellow_card_times,json=yellowCardTimes" json:"yellow_card_times,omitempty"`
	// The total number of yellow cards ever issued to the team.
	YellowCards *uint32 `protobuf:"varint,5,req,name=yellow_cards,json=yellowCards" json:"yellow_cards,omitempty"`
	// The number of timeouts this team can still call.
	// If in a timeout right now, that timeout is excluded.
	Timeouts *uint32 `protobuf:"varint,6,req,name=timeouts" json:"timeouts,omitempty"`
	// The number of microseconds of timeout this team can use.
	TimeoutTime *uint32 `protobuf:"varint,7,req,name=timeout_time,json=timeoutTime" json:"timeout_time,omitempty"`
	// The pattern number of this team's goalkeeper.
	Goalkeeper *uint32 `protobuf:"varint,8,req,name=goalkeeper" json:"goalkeeper,omitempty"`
	// The total number of countable fouls that act towards yellow cards
	FoulCounter *uint32 `protobuf:"varint,9,opt,name=foul_counter,json=foulCounter" json:"foul_counter,omitempty"`
	// The number of consecutive ball placement failures of this team
	BallPlacementFailures *uint32 `protobuf:"varint,10,opt,name=ball_placement_failures,json=ballPlacementFailures" json:"ball_placement_failures,omitempty"`
	// Indicate if the team is able and allowed to place the ball
	CanPlaceBall *bool `protobuf:"varint,12,opt,name=can_place_ball,json=canPlaceBall" json:"can_place_ball,omitempty"`
	// The maximum number of bots allowed on the field based on division and cards
	MaxAllowedBots *uint32 `protobuf:"varint,13,opt,name=max_allowed_bots,json=maxAllowedBots" json:"max_allowed_bots,omitempty"`
	// The team has submitted an intent to substitute one or more robots at the next chance
	BotSubstitutionIntent *bool `protobuf:"varint,14,opt,name=bot_substitution_intent,json=botSubstitutionIntent" json:"bot_substitution_intent,omitempty"`
	// Indicate if the team reached the maximum allowed ball placement failures and is thus not allowed to place the ball anymore
	BallPlacementFailuresReached *bool `protobuf:"varint,15,opt,name=ball_placement_failures_reached,json=ballPlacementFailuresReached" json:"ball_placement_failures_reached,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Referee_Info_TeamInfo) Reset() {
	*x = Referee_Info_TeamInfo{}
	mi := &file_to_racoonai_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Referee_Info_TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee_Info_TeamInfo) ProtoMessage() {}

func (x *Referee_Info_TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee_Info_TeamInfo.ProtoReflect.Descriptor instead.
func (*Referee_Info_TeamInfo) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Referee_Info_TeamInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Referee_Info_TeamInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetRedCards() uint32 {
	if x != nil && x.RedCards != nil {
		return *x.RedCards
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetYellowCardTimes() []uint32 {
	if x != nil {
		return x.YellowCardTimes
	}
	return nil
}

func (x *Referee_Info_TeamInfo) GetYellowCards() uint32 {
	if x != nil && x.YellowCards != nil {
		return *x.YellowCards
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetTimeouts() uint32 {
	if x != nil && x.Timeouts != nil {
		return *x.Timeouts
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetTimeoutTime() uint32 {
	if x != nil && x.TimeoutTime != nil {
		return *x.TimeoutTime
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetGoalkeeper() uint32 {
	if x != nil && x.Goalkeeper != nil {
		return *x.Goalkeeper
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetFoulCounter() uint32 {
	if x != nil && x.FoulCounter != nil {
		return *x.FoulCounter
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetBallPlacementFailures() uint32 {
	if x != nil && x.BallPlacementFailures != nil {
		return *x.BallPlacementFailures
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetCanPlaceBall() bool {
	if x != nil && x.CanPlaceBall != nil {
		return *x.CanPlaceBall
	}
	return false
}

func (x *Referee_Info_TeamInfo) GetMaxAllowedBots() uint32 {
	if x != nil && x.MaxAllowedBots != nil {
		return *x.MaxAllowedBots
	}
	return 0
}

func (x *Referee_Info_TeamInfo) GetBotSubstitutionIntent() bool {
	if x != nil && x.BotSubstitutionIntent != nil {
		return *x.BotSubstitutionIntent
	}
	return false
}

func (x *Referee_Info_TeamInfo) GetBallPlacementFailuresReached() bool {
	if x != nil && x.BallPlacementFailuresReached != nil {
		return *x.BallPlacementFailuresReached
	}
	return false
}

var File_to_racoonai_proto protoreflect.FileDescriptor

const file_to_racoonai_proto_rawDesc = "" +
	"\n" +
	"\x11to_racoonai.proto\x1a\x17ssl_gc_game_event.proto\"\x86\x06\n" +
	"\vRobot_Infos\x12\x19\n" +
	"\brobot_id\x18\x01 \x02(\rR\arobotId\x12\f\n" +
	"\x01x\x18\x02 \x02(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x03 \x02(\x02R\x01y\x12\x14\n" +
	"\x05theta\x18\x04 \x02(\x02R\x05theta\x12.\n" +
	"\x13distance_ball_robot\x18\x05 \x01(\x02R\x11distanceBallRobot\x12*\n" +
	"\x11radian_ball_robot\x18\x06 \x01(\x02R\x0fradianBallRobot\x12\x15\n" +
	"\x06diff_x\x18\a \x02(\x02R\x05diffX\x12\x15\n" +
	"\x06diff_y\x18\b \x02(\x02R\x05diffY\x12\x1d\n" +
	"\n" +
	"diff_theta\x18\t \x02(\x02R\tdiffTheta\x12\x14\n" +
	"\x05speed\x18\n" +
	" \x02(\x02R\x05speed\x12\x14\n" +
	"\x05slope\x18\v \x02(\x02R\x05slope\x12\x1c\n" +
	"\tintercept\x18\f \x02(\x02R\tintercept\x12)\n" +
	"\x10angular_velocity\x18\r \x02(\x02R\x0fangularVelocity\x12\x18\n" +
	"\avisible\x18\x0e \x02(\bR\avisible\x123\n" +
	"\x16is_detect_photo_sensor\x18\x0f \x01(\bR\x13isDetectPhotoSensor\x12&\n" +
	"\x0fis_new_dribbler\x18\x10 \x01(\bR\risNewDribbler\x129\n" +
	"\x19is_detect_dribbler_sensor\x18\x11 \x01(\bR\x16isDetectDribblerSensor\x12\x16\n" +
	"\x06online\x18\x12 \x01(\bR\x06online\x12'\n" +
	"\x0fbattery_voltage\x18\x13 \x01(\x02R\x0ebatteryVoltage\x12\x1b\n" +
	"\tcap_power\x18\x14 \x01(\rR\bcapPower\x12\"\n" +
	"\rball_camera_x\x18\x15 \x01(\x02R\vballCameraX\x12\"\n" +
	"\rball_camera_y\x18\x16 \x01(\x02R\vballCameraY\x124\n" +
	"\x17is_ball_exist_on_camera\x18\x17 \x01(\bR\x13isBallExistOnCamera\"\xad\x02\n" +
	"\tBall_Info\x12\x1d\n" +
	"\n" +
	"filtered_x\x18\x01 \x02(\x02R\tfilteredX\x12\x1d\n" +
	"\n" +
	"filtered_y\x18\x02 \x02(\x02R\tfilteredY\x12\f\n" +
	"\x01x\x18\x03 \x02(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x04 \x02(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x05 \x02(\x02R\x01z\x12\x15\n" +
	"\x06diff_x\x18\x06 \x02(\x02R\x05diffX\x12\x15\n" +
	"\x06diff_y\x18\a \x02(\x02R\x05diffY\x12!\n" +
	"\fslope_radian\x18\b \x02(\x02R\vslopeRadian\x12\x1c\n" +
	"\tintercept\x18\t \x02(\x02R\tintercept\x12\x14\n" +
	"\x05speed\x18\n" +
	" \x02(\x02R\x05speed\x12\x14\n" +
	"\x05slope\x18\v \x02(\x02R\x05slope\x12\x1d\n" +
	"\n" +
	"is_visible\x18\f \x02(\bR\tisVisible\"\xc5\x04\n" +
	"\rGeometry_Info\x12!\n" +
	"\ffield_length\x18\x01 \x02(\x05R\vfieldLength\x12\x1f\n" +
	"\vfield_width\x18\x02 \x02(\x05R\n" +
	"fieldWidth\x12\x1d\n" +
	"\n" +
	"goal_width\x18\x03 \x02(\x05R\tgoalWidth\x12\x1d\n" +
	"\n" +
	"goal_depth\x18\x04 \x02(\x05R\tgoalDepth\x12%\n" +
	"\x0eboundary_width\x18\x05 \x02(\x05R\rboundaryWidth\x12,\n" +
	"\x12penalty_area_depth\x18\x06 \x01(\x05R\x10penaltyAreaDepth\x12,\n" +
	"\x12penalty_area_width\x18\a \x01(\x05R\x10penaltyAreaWidth\x120\n" +
	"\x14center_circle_radius\x18\b \x01(\x05R\x12centerCircleRadius\x12%\n" +
	"\x0eline_thickness\x18\t \x01(\x05R\rlineThickness\x12<\n" +
	"\x1bgoal_center_to_penalty_mark\x18\n" +
	" \x01(\x05R\x17goalCenterToPenaltyMark\x12\x1f\n" +
	"\vgoal_height\x18\v \x01(\x05R\n" +
	"goalHeight\x12\x1f\n" +
	"\vball_radius\x18\f \x01(\x02R\n" +
	"ballRadius\x12(\n" +
	"\x10max_robot_radius\x18\r \x01(\x02R\x0emaxRobotRadius\x12\x15\n" +
	"\x06goal_x\x18\x0e \x02(\x02R\x05goalX\x12\x15\n" +
	"\x06goal_y\x18\x0f \x02(\x02R\x05goalY\"\x90\x0f\n" +
	"\fReferee_Info\x12/\n" +
	"\acommand\x18\x01 \x02(\x0e2\x15.Referee_Info.CommandR\acommand\x129\n" +
	"\fteaminfo_our\x18\x02 \x02(\v2\x16.Referee_Info.TeamInfoR\vteaminfoOur\x12=\n" +
	"\x0eteaminfo_their\x18\x03 \x02(\v2\x16.Referee_Info.TeamInfoR\rteaminfoTheir\x12)\n" +
	"\x05stage\x18\x04 \x02(\x0e2\x13.Referee_Info.StageR\x05stage\x12!\n" +
	"\fyellow_cards\x18\x05 \x02(\rR\vyellowCards\x12\x1b\n" +
	"\tred_cards\x18\x06 \x02(\rR\bredCards\x12*\n" +
	"\x11our_goalkeeper_id\x18\a \x02(\rR\x0fourGoalkeeperId\x12 \n" +
	"\x05event\x18\b \x03(\v2\n" +
	".GameEventR\x05event\x126\n" +
	"\vpre_command\x18\t \x01(\x0e2\x15.Referee_Info.CommandR\n" +
	"preCommand\x128\n" +
	"\fnext_command\x18\n" +
	" \x01(\x0e2\x15.Referee_Info.CommandR\vnextCommand\x12(\n" +
	"\x10ball_placement_x\x18\v \x01(\x02R\x0eballPlacementX\x12(\n" +
	"\x10ball_placement_y\x18\f \x01(\x02R\x0eballPlacementY\x12A\n" +
	"\x1dcurrent_action_time_remaining\x18\r \x01(\x05R\x1acurrentActionTimeRemaining\x1a\xad\x04\n" +
	"\bTeamInfo\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12\x14\n" +
	"\x05score\x18\x02 \x02(\rR\x05score\x12\x1b\n" +
	"\tred_cards\x18\x03 \x02(\rR\bredCards\x12.\n" +
	"\x11yellow_card_times\x18\x04 \x03(\rB\x02\x10\x01R\x0fyellowCardTimes\x12!\n" +
	"\fyellow_cards\x18\x05 \x02(\rR\vyellowCards\x12\x1a\n" +
	"\btimeouts\x18\x06 \x02(\rR\btimeouts\x12!\n" +
	"\ftimeout_time\x18\a \x02(\rR\vtimeoutTime\x12\x1e\n" +
	"\n" +
	"goalkeeper\x18\b \x02(\rR\n" +
	"goalkeeper\x12!\n" +
	"\ffoul_counter\x18\t \x01(\rR\vfoulCounter\x126\n" +
	"\x17ball_placement_failures\x18\n" +
	" \x01(\rR\x15ballPlacementFailures\x12$\n" +
	"\x0ecan_place_ball\x18\f \x01(\bR\fcanPlaceBall\x12(\n" +
	"\x10max_allowed_bots\x18\r \x01(\rR\x0emaxAllowedBots\x126\n" +
	"\x17bot_substitution_intent\x18\x0e \x01(\bR\x15botSubstitutionIntent\x12E\n" +
	"\x1fball_placement_failures_reached\x18\x0f \x01(\bR\x1cballPlacementFailuresReached\"\x8e\x03\n" +
	"\aCommand\x12\b\n" +
	"\x04HALT\x10\x00\x12\b\n" +
	"\x04STOP\x10\x01\x12\x10\n" +
	"\fNORMAL_START\x10\x02\x12\x0f\n" +
	"\vFORCE_START\x10\x03\x12\x1a\n" +
	"\x16PREPARE_KICKOFF_YELLOW\x10\x04\x12\x18\n" +
	"\x14PREPARE_KICKOFF_BLUE\x10\x05\x12\x1a\n" +
	"\x16PREPARE_PENALTY_YELLOW\x10\x06\x12\x18\n" +
	"\x14PREPARE_PENALTY_BLUE\x10\a\x12\x16\n" +
	"\x12DIRECT_FREE_YELLOW\x10\b\x12\x14\n" +
	"\x10DIRECT_FREE_BLUE\x10\t\x12\x18\n" +
	"\x14INDIRECT_FREE_YELLOW\x10\n" +
	"\x12\x16\n" +
	"\x12INDIRECT_FREE_BLUE\x10\v\x12\x12\n" +
	"\x0eTIMEOUT_YELLOW\x10\f\x12\x10\n" +
	"\fTIMEOUT_BLUE\x10\r\x12\x13\n" +
	"\vGOAL_YELLOW\x10\x0e\x1a\x02\b\x01\x12\x11\n" +
	"\tGOAL_BLUE\x10\x0f\x1a\x02\b\x01\x12\x19\n" +
	"\x15BALL_PLACEMENT_YELLOW\x10\x10\x12\x17\n" +
	"\x13BALL_PLACEMENT_BLUE\x10\x11\"\xd1\x02\n" +
	"\x05Stage\x12\x19\n" +
	"\x15NORMAL_FIRST_HALF_PRE\x10\x00\x12\x15\n" +
	"\x11NORMAL_FIRST_HALF\x10\x01\x12\x14\n" +
	"\x10NORMAL_HALF_TIME\x10\x02\x12\x1a\n" +
	"\x16NORMAL_SECOND_HALF_PRE\x10\x03\x12\x16\n" +
	"\x12NORMAL_SECOND_HALF\x10\x04\x12\x14\n" +
	"\x10EXTRA_TIME_BREAK\x10\x05\x12\x18\n" +
	"\x14EXTRA_FIRST_HALF_PRE\x10\x06\x12\x14\n" +
	"\x10EXTRA_FIRST_HALF\x10\a\x12\x13\n" +
	"\x0fEXTRA_HALF_TIME\x10\b\x12\x19\n" +
	"\x15EXTRA_SECOND_HALF_PRE\x10\t\x12\x15\n" +
	"\x11EXTRA_SECOND_HALF\x10\n" +
	"\x12\x1a\n" +
	"\x16PENALTY_SHOOTOUT_BREAK\x10\v\x12\x14\n" +
	"\x10PENALTY_SHOOTOUT\x10\f\x12\r\n" +
	"\tPOST_GAME\x10\r\":\n" +
	"\rRobotIP_Infos\x12\x19\n" +
	"\brobot_id\x18\x01 \x02(\rR\arobotId\x12\x0e\n" +
	"\x02ip\x18\x02 \x02(\tR\x02ip\"\xe7\x03\n" +
	"\vOther_Infos\x12$\n" +
	"\x0enum_of_cameras\x18\x01 \x02(\x05R\fnumOfCameras\x12)\n" +
	"\x11num_of_our_robots\x18\x02 \x02(\x05R\x0enumOfOurRobots\x12-\n" +
	"\x13num_of_enemy_robots\x18\x03 \x02(\x05R\x10numOfEnemyRobots\x12 \n" +
	"\vsecperframe\x18\x04 \x02(\x02R\vsecperframe\x12$\n" +
	"\x0eis_vision_recv\x18\x05 \x02(\bR\fisVisionRecv\x12)\n" +
	"\x10attack_direction\x18\x06 \x02(\x05R\x0fattackDirection\x12$\n" +
	"\x0eis_ball_moving\x18\a \x02(\bR\fisBallMoving\x12\x17\n" +
	"\ais_real\x18\b \x02(\bR\x06isReal\x12$\n" +
	"\x0eis_team_yellow\x18\t \x02(\bR\fisTeamYellow\x12\"\n" +
	"\ris_half_court\x18\n" +
	" \x02(\bR\visHalfCourt\x12!\n" +
	"\fis_matchmode\x18\v \x02(\bR\visMatchmode\x129\n" +
	"\x19grsim_command_listen_port\x18\f \x02(\rR\x16grsimCommandListenPort\"\xd5\x02\n" +
	"\x0fRacoonMW_Packet\x12+\n" +
	"\n" +
	"our_robots\x18\x01 \x03(\v2\f.Robot_InfosR\tourRobots\x12/\n" +
	"\fenemy_robots\x18\x02 \x03(\v2\f.Robot_InfosR\venemyRobots\x12*\n" +
	"\bgeometry\x18\x03 \x02(\v2\x0e.Geometry_InfoR\bgeometry\x12\x1e\n" +
	"\x04ball\x18\x04 \x02(\v2\n" +
	".Ball_InfoR\x04ball\x12'\n" +
	"\areferee\x18\x05 \x02(\v2\r.Referee_InfoR\areferee\x12+\n" +
	"\trobot_ips\x18\x06 \x03(\v2\x0e.RobotIP_InfosR\brobotIps\x12 \n" +
	"\x04info\x18\a \x02(\v2\f.Other_InfosR\x04info\x12 \n" +
	"\x05event\x18\b \x03(\v2\n" +
	".GameEventR\x05eventB-Z+github.com/Rione-SSL/RACOON-Pi/proto/pb_gen"

var (
	file_to_racoonai_proto_rawDescOnce sync.Once
	file_to_racoonai_proto_rawDescData []byte
)

func file_to_racoonai_proto_rawDescGZIP() []byte {
	file_to_racoonai_proto_rawDescOnce.Do(func() {
		file_to_racoonai_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_to_racoonai_proto_rawDesc), len(file_to_racoonai_proto_rawDesc)))
	})
	return file_to_racoonai_proto_rawDescData
}

var file_to_racoonai_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_to_racoonai_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_to_racoonai_proto_goTypes = []any{
	(Referee_Info_Command)(0),     // 0: Referee_Info.Command
	(Referee_Info_Stage)(0),       // 1: Referee_Info.Stage
	(*Robot_Infos)(nil),           // 2: Robot_Infos
	(*Ball_Info)(nil),             // 3: Ball_Info
	(*Geometry_Info)(nil),         // 4: Geometry_Info
	(*Referee_Info)(nil),          // 5: Referee_Info
	(*RobotIP_Infos)(nil),         // 6: RobotIP_Infos
	(*Other_Infos)(nil),           // 7: Other_Infos
	(*RacoonMW_Packet)(nil),       // 8: RacoonMW_Packet
	(*Referee_Info_TeamInfo)(nil), // 9: Referee_Info.TeamInfo
	(*GameEvent)(nil),             // 10: GameEvent
}
var file_to_racoonai_proto_depIdxs = []int32{
	0,  // 0: Referee_Info.command:type_name -> Referee_Info.Command
	9,  // 1: Referee_Info.teaminfo_our:type_name -> Referee_Info.TeamInfo
	9,  // 2: Referee_Info.teaminfo_their:type_name -> Referee_Info.TeamInfo
	1,  // 3: Referee_Info.stage:type_name -> Referee_Info.Stage
	10, // 4: Referee_Info.event:type_name -> GameEvent
	0,  // 5: Referee_Info.pre_command:type_name -> Referee_Info.Command
	0,  // 6: Referee_Info.next_command:type_name -> Referee_Info.Command
	2,  // 7: RacoonMW_Packet.our_robots:type_name -> Robot_Infos
	2,  // 8: RacoonMW_Packet.enemy_robots:type_name -> Robot_Infos
	4,  // 9: RacoonMW_Packet.geometry:type_name -> Geometry_Info
	3,  // 10: RacoonMW_Packet.ball:type_name -> Ball_Info
	5,  // 11: RacoonMW_Packet.referee:type_name -> Referee_Info
	6,  // 12: RacoonMW_Packet.robot_ips:type_name -> RobotIP_Infos
	7,  // 13: RacoonMW_Packet.info:type_name -> Other_Infos
	10, // 14: RacoonMW_Packet.event:type_name -> GameEvent
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_to_racoonai_proto_init() }
func file_to_racoonai_proto_init() {
	if File_to_racoonai_proto != nil {
		return
	}
	file_ssl_gc_game_event_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_to_racoonai_proto_rawDesc), len(file_to_racoonai_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_to_racoonai_proto_goTypes,
		DependencyIndexes: file_to_racoonai_proto_depIdxs,
		EnumInfos:         file_to_racoonai_proto_enumTypes,
		MessageInfos:      file_to_racoonai_proto_msgTypes,
	}.Build()
	File_to_racoonai_proto = out.File
	file_to_racoonai_proto_goTypes = nil
	file_to_racoonai_proto_depIdxs = nil
}
