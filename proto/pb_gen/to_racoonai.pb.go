// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: to_racoonai.proto

package pb_gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These are the "fine" states of play on the field.
type Referee_Info_Command int32

const (
	// All robots should completely stop moving.
	Referee_Info_HALT Referee_Info_Command = 0
	// Robots must keep 50 cm from the ball.
	Referee_Info_STOP Referee_Info_Command = 1
	// A prepared kickoff or penalty may now be taken.
	Referee_Info_NORMAL_START Referee_Info_Command = 2
	// The ball is dropped and free for either team.
	Referee_Info_FORCE_START Referee_Info_Command = 3
	// The yellow team may move into kickoff position.
	Referee_Info_PREPARE_KICKOFF_YELLOW Referee_Info_Command = 4
	// The blue team may move into kickoff position.
	Referee_Info_PREPARE_KICKOFF_BLUE Referee_Info_Command = 5
	// The yellow team may move into penalty position.
	Referee_Info_PREPARE_PENALTY_YELLOW Referee_Info_Command = 6
	// The blue team may move into penalty position.
	Referee_Info_PREPARE_PENALTY_BLUE Referee_Info_Command = 7
	// The yellow team may take a direct free kick.
	Referee_Info_DIRECT_FREE_YELLOW Referee_Info_Command = 8
	// The blue team may take a direct free kick.
	Referee_Info_DIRECT_FREE_BLUE Referee_Info_Command = 9
	// The yellow team may take an indirect free kick.
	Referee_Info_INDIRECT_FREE_YELLOW Referee_Info_Command = 10
	// The blue team may take an indirect free kick.
	Referee_Info_INDIRECT_FREE_BLUE Referee_Info_Command = 11
	// The yellow team is currently in a timeout.
	Referee_Info_TIMEOUT_YELLOW Referee_Info_Command = 12
	// The blue team is currently in a timeout.
	Referee_Info_TIMEOUT_BLUE Referee_Info_Command = 13
	// The yellow team just scored a goal.
	// For information only.
	// For rules compliance, teams must treat as STOP.
	// Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
	//
	// Deprecated: Do not use.
	Referee_Info_GOAL_YELLOW Referee_Info_Command = 14
	// The blue team just scored a goal. See also GOAL_YELLOW.
	//
	// Deprecated: Do not use.
	Referee_Info_GOAL_BLUE Referee_Info_Command = 15
	// Equivalent to STOP, but the yellow team must pick up the ball and
	// drop it in the Designated Position.
	Referee_Info_BALL_PLACEMENT_YELLOW Referee_Info_Command = 16
	// Equivalent to STOP, but the blue team must pick up the ball and drop
	// it in the Designated Position.
	Referee_Info_BALL_PLACEMENT_BLUE Referee_Info_Command = 17
)

// Enum value maps for Referee_Info_Command.
var (
	Referee_Info_Command_name = map[int32]string{
		0:  "HALT",
		1:  "STOP",
		2:  "NORMAL_START",
		3:  "FORCE_START",
		4:  "PREPARE_KICKOFF_YELLOW",
		5:  "PREPARE_KICKOFF_BLUE",
		6:  "PREPARE_PENALTY_YELLOW",
		7:  "PREPARE_PENALTY_BLUE",
		8:  "DIRECT_FREE_YELLOW",
		9:  "DIRECT_FREE_BLUE",
		10: "INDIRECT_FREE_YELLOW",
		11: "INDIRECT_FREE_BLUE",
		12: "TIMEOUT_YELLOW",
		13: "TIMEOUT_BLUE",
		14: "GOAL_YELLOW",
		15: "GOAL_BLUE",
		16: "BALL_PLACEMENT_YELLOW",
		17: "BALL_PLACEMENT_BLUE",
	}
	Referee_Info_Command_value = map[string]int32{
		"HALT":                   0,
		"STOP":                   1,
		"NORMAL_START":           2,
		"FORCE_START":            3,
		"PREPARE_KICKOFF_YELLOW": 4,
		"PREPARE_KICKOFF_BLUE":   5,
		"PREPARE_PENALTY_YELLOW": 6,
		"PREPARE_PENALTY_BLUE":   7,
		"DIRECT_FREE_YELLOW":     8,
		"DIRECT_FREE_BLUE":       9,
		"INDIRECT_FREE_YELLOW":   10,
		"INDIRECT_FREE_BLUE":     11,
		"TIMEOUT_YELLOW":         12,
		"TIMEOUT_BLUE":           13,
		"GOAL_YELLOW":            14,
		"GOAL_BLUE":              15,
		"BALL_PLACEMENT_YELLOW":  16,
		"BALL_PLACEMENT_BLUE":    17,
	}
)

func (x Referee_Info_Command) Enum() *Referee_Info_Command {
	p := new(Referee_Info_Command)
	*p = x
	return p
}

func (x Referee_Info_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referee_Info_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_to_racoonai_proto_enumTypes[0].Descriptor()
}

func (Referee_Info_Command) Type() protoreflect.EnumType {
	return &file_to_racoonai_proto_enumTypes[0]
}

func (x Referee_Info_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Referee_Info_Command) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Referee_Info_Command(num)
	return nil
}

// Deprecated: Use Referee_Info_Command.Descriptor instead.
func (Referee_Info_Command) EnumDescriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3, 0}
}

// These are the "coarse" stages of the game.
type Referee_Info_Stage int32

const (
	// The first half is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_NORMAL_FIRST_HALF_PRE Referee_Info_Stage = 0
	// The first half of the normal game, before half time.
	Referee_Info_NORMAL_FIRST_HALF Referee_Info_Stage = 1
	// Half time between first and second halves.
	Referee_Info_NORMAL_HALF_TIME Referee_Info_Stage = 2
	// The second half is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_NORMAL_SECOND_HALF_PRE Referee_Info_Stage = 3
	// The second half of the normal game, after half time.
	Referee_Info_NORMAL_SECOND_HALF Referee_Info_Stage = 4
	// The break before extra time.
	Referee_Info_EXTRA_TIME_BREAK Referee_Info_Stage = 5
	// The first half of extra time is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_EXTRA_FIRST_HALF_PRE Referee_Info_Stage = 6
	// The first half of extra time.
	Referee_Info_EXTRA_FIRST_HALF Referee_Info_Stage = 7
	// Half time between first and second extra halves.
	Referee_Info_EXTRA_HALF_TIME Referee_Info_Stage = 8
	// The second half of extra time is about to start.
	// A kickoff is called within this stage.
	// This stage ends with the NORMAL_START.
	Referee_Info_EXTRA_SECOND_HALF_PRE Referee_Info_Stage = 9
	// The second half of extra time.
	Referee_Info_EXTRA_SECOND_HALF Referee_Info_Stage = 10
	// The break before penalty shootout.
	Referee_Info_PENALTY_SHOOTOUT_BREAK Referee_Info_Stage = 11
	// The penalty shootout.
	Referee_Info_PENALTY_SHOOTOUT Referee_Info_Stage = 12
	// The game is over.
	Referee_Info_POST_GAME Referee_Info_Stage = 13
)

// Enum value maps for Referee_Info_Stage.
var (
	Referee_Info_Stage_name = map[int32]string{
		0:  "NORMAL_FIRST_HALF_PRE",
		1:  "NORMAL_FIRST_HALF",
		2:  "NORMAL_HALF_TIME",
		3:  "NORMAL_SECOND_HALF_PRE",
		4:  "NORMAL_SECOND_HALF",
		5:  "EXTRA_TIME_BREAK",
		6:  "EXTRA_FIRST_HALF_PRE",
		7:  "EXTRA_FIRST_HALF",
		8:  "EXTRA_HALF_TIME",
		9:  "EXTRA_SECOND_HALF_PRE",
		10: "EXTRA_SECOND_HALF",
		11: "PENALTY_SHOOTOUT_BREAK",
		12: "PENALTY_SHOOTOUT",
		13: "POST_GAME",
	}
	Referee_Info_Stage_value = map[string]int32{
		"NORMAL_FIRST_HALF_PRE":  0,
		"NORMAL_FIRST_HALF":      1,
		"NORMAL_HALF_TIME":       2,
		"NORMAL_SECOND_HALF_PRE": 3,
		"NORMAL_SECOND_HALF":     4,
		"EXTRA_TIME_BREAK":       5,
		"EXTRA_FIRST_HALF_PRE":   6,
		"EXTRA_FIRST_HALF":       7,
		"EXTRA_HALF_TIME":        8,
		"EXTRA_SECOND_HALF_PRE":  9,
		"EXTRA_SECOND_HALF":      10,
		"PENALTY_SHOOTOUT_BREAK": 11,
		"PENALTY_SHOOTOUT":       12,
		"POST_GAME":              13,
	}
)

func (x Referee_Info_Stage) Enum() *Referee_Info_Stage {
	p := new(Referee_Info_Stage)
	*p = x
	return p
}

func (x Referee_Info_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referee_Info_Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_to_racoonai_proto_enumTypes[1].Descriptor()
}

func (Referee_Info_Stage) Type() protoreflect.EnumType {
	return &file_to_racoonai_proto_enumTypes[1]
}

func (x Referee_Info_Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Referee_Info_Stage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Referee_Info_Stage(num)
	return nil
}

// Deprecated: Use Referee_Info_Stage.Descriptor instead.
func (Referee_Info_Stage) EnumDescriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3, 1}
}

type Robot_Infos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RobotId           *uint32  `protobuf:"varint,1,req,name=robot_id,json=robotId" json:"robot_id,omitempty"`
	X                 *float32 `protobuf:"fixed32,2,req,name=x" json:"x,omitempty"`
	Y                 *float32 `protobuf:"fixed32,3,req,name=y" json:"y,omitempty"`
	Theta             *float32 `protobuf:"fixed32,4,req,name=theta" json:"theta,omitempty"`
	DistanceBallRobot *float32 `protobuf:"fixed32,5,opt,name=distance_ball_robot,json=distanceBallRobot" json:"distance_ball_robot,omitempty"`
	RadianBallRobot   *float32 `protobuf:"fixed32,6,opt,name=radian_ball_robot,json=radianBallRobot" json:"radian_ball_robot,omitempty"`
	DiffX             *float32 `protobuf:"fixed32,7,req,name=diff_x,json=diffX" json:"diff_x,omitempty"`
	DiffY             *float32 `protobuf:"fixed32,8,req,name=diff_y,json=diffY" json:"diff_y,omitempty"`
	DiffTheta         *float32 `protobuf:"fixed32,9,req,name=diff_theta,json=diffTheta" json:"diff_theta,omitempty"`
	Speed             *float32 `protobuf:"fixed32,10,req,name=speed" json:"speed,omitempty"`
	Slope             *float32 `protobuf:"fixed32,11,req,name=slope" json:"slope,omitempty"`
	Intercept         *float32 `protobuf:"fixed32,12,req,name=intercept" json:"intercept,omitempty"`
	AngularVelocity   *float32 `protobuf:"fixed32,13,req,name=angular_velocity,json=angularVelocity" json:"angular_velocity,omitempty"`
	Visible           *bool    `protobuf:"varint,14,req,name=visible" json:"visible,omitempty"`
	BallCatch         *bool    `protobuf:"varint,15,opt,name=ball_catch,json=ballCatch" json:"ball_catch,omitempty"`
	Online            *bool    `protobuf:"varint,16,opt,name=online" json:"online,omitempty"`
	BatteryVoltage    *float32 `protobuf:"fixed32,17,opt,name=battery_voltage,json=batteryVoltage" json:"battery_voltage,omitempty"`
}

func (x *Robot_Infos) Reset() {
	*x = Robot_Infos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_to_racoonai_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Robot_Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Robot_Infos) ProtoMessage() {}

func (x *Robot_Infos) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Robot_Infos.ProtoReflect.Descriptor instead.
func (*Robot_Infos) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{0}
}

func (x *Robot_Infos) GetRobotId() uint32 {
	if x != nil && x.RobotId != nil {
		return *x.RobotId
	}
	return 0
}

func (x *Robot_Infos) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Robot_Infos) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Robot_Infos) GetTheta() float32 {
	if x != nil && x.Theta != nil {
		return *x.Theta
	}
	return 0
}

func (x *Robot_Infos) GetDistanceBallRobot() float32 {
	if x != nil && x.DistanceBallRobot != nil {
		return *x.DistanceBallRobot
	}
	return 0
}

func (x *Robot_Infos) GetRadianBallRobot() float32 {
	if x != nil && x.RadianBallRobot != nil {
		return *x.RadianBallRobot
	}
	return 0
}

func (x *Robot_Infos) GetDiffX() float32 {
	if x != nil && x.DiffX != nil {
		return *x.DiffX
	}
	return 0
}

func (x *Robot_Infos) GetDiffY() float32 {
	if x != nil && x.DiffY != nil {
		return *x.DiffY
	}
	return 0
}

func (x *Robot_Infos) GetDiffTheta() float32 {
	if x != nil && x.DiffTheta != nil {
		return *x.DiffTheta
	}
	return 0
}

func (x *Robot_Infos) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Robot_Infos) GetSlope() float32 {
	if x != nil && x.Slope != nil {
		return *x.Slope
	}
	return 0
}

func (x *Robot_Infos) GetIntercept() float32 {
	if x != nil && x.Intercept != nil {
		return *x.Intercept
	}
	return 0
}

func (x *Robot_Infos) GetAngularVelocity() float32 {
	if x != nil && x.AngularVelocity != nil {
		return *x.AngularVelocity
	}
	return 0
}

func (x *Robot_Infos) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *Robot_Infos) GetBallCatch() bool {
	if x != nil && x.BallCatch != nil {
		return *x.BallCatch
	}
	return false
}

func (x *Robot_Infos) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *Robot_Infos) GetBatteryVoltage() float32 {
	if x != nil && x.BatteryVoltage != nil {
		return *x.BatteryVoltage
	}
	return 0
}

type Ball_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilteredX   *float32 `protobuf:"fixed32,1,req,name=filtered_x,json=filteredX" json:"filtered_x,omitempty"`
	FilteredY   *float32 `protobuf:"fixed32,2,req,name=filtered_y,json=filteredY" json:"filtered_y,omitempty"`
	X           *float32 `protobuf:"fixed32,3,req,name=x" json:"x,omitempty"`
	Y           *float32 `protobuf:"fixed32,4,req,name=y" json:"y,omitempty"`
	Z           *float32 `protobuf:"fixed32,5,req,name=z" json:"z,omitempty"`
	DiffX       *float32 `protobuf:"fixed32,6,req,name=diff_x,json=diffX" json:"diff_x,omitempty"`
	DiffY       *float32 `protobuf:"fixed32,7,req,name=diff_y,json=diffY" json:"diff_y,omitempty"`
	SlopeRadian *float32 `protobuf:"fixed32,8,req,name=slope_radian,json=slopeRadian" json:"slope_radian,omitempty"`
	Intercept   *float32 `protobuf:"fixed32,9,req,name=intercept" json:"intercept,omitempty"`
	Speed       *float32 `protobuf:"fixed32,10,req,name=speed" json:"speed,omitempty"`
	Slope       *float32 `protobuf:"fixed32,11,req,name=slope" json:"slope,omitempty"`
}

func (x *Ball_Info) Reset() {
	*x = Ball_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_to_racoonai_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ball_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ball_Info) ProtoMessage() {}

func (x *Ball_Info) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ball_Info.ProtoReflect.Descriptor instead.
func (*Ball_Info) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{1}
}

func (x *Ball_Info) GetFilteredX() float32 {
	if x != nil && x.FilteredX != nil {
		return *x.FilteredX
	}
	return 0
}

func (x *Ball_Info) GetFilteredY() float32 {
	if x != nil && x.FilteredY != nil {
		return *x.FilteredY
	}
	return 0
}

func (x *Ball_Info) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Ball_Info) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Ball_Info) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Ball_Info) GetDiffX() float32 {
	if x != nil && x.DiffX != nil {
		return *x.DiffX
	}
	return 0
}

func (x *Ball_Info) GetDiffY() float32 {
	if x != nil && x.DiffY != nil {
		return *x.DiffY
	}
	return 0
}

func (x *Ball_Info) GetSlopeRadian() float32 {
	if x != nil && x.SlopeRadian != nil {
		return *x.SlopeRadian
	}
	return 0
}

func (x *Ball_Info) GetIntercept() float32 {
	if x != nil && x.Intercept != nil {
		return *x.Intercept
	}
	return 0
}

func (x *Ball_Info) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Ball_Info) GetSlope() float32 {
	if x != nil && x.Slope != nil {
		return *x.Slope
	}
	return 0
}

type Geometry_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field length (distance between goal lines) in mm
	FieldLength *int32 `protobuf:"varint,1,req,name=field_length,json=fieldLength" json:"field_length,omitempty"`
	// Field width (distance between touch lines) in mm
	FieldWidth *int32 `protobuf:"varint,2,req,name=field_width,json=fieldWidth" json:"field_width,omitempty"`
	// Goal width (distance between inner edges of goal posts) in mm
	GoalWidth *int32 `protobuf:"varint,3,req,name=goal_width,json=goalWidth" json:"goal_width,omitempty"`
	// Goal depth (distance from outer goal line edge to inner goal back) in mm
	GoalDepth *int32 `protobuf:"varint,4,req,name=goal_depth,json=goalDepth" json:"goal_depth,omitempty"`
	// Boundary width (distance from touch/goal line centers to boundary walls) in mm
	BoundaryWidth *int32 `protobuf:"varint,5,req,name=boundary_width,json=boundaryWidth" json:"boundary_width,omitempty"`
	// Depth of the penalty/defense area (measured between line centers) in mm
	PenaltyAreaDepth *int32 `protobuf:"varint,6,opt,name=penalty_area_depth,json=penaltyAreaDepth" json:"penalty_area_depth,omitempty"`
	// Width of the penalty/defense area (measured between line centers) in mm
	PenaltyAreaWidth *int32 `protobuf:"varint,7,opt,name=penalty_area_width,json=penaltyAreaWidth" json:"penalty_area_width,omitempty"`
	// Radius of the center circle (measured between line centers) in mm
	CenterCircleRadius *int32 `protobuf:"varint,8,opt,name=center_circle_radius,json=centerCircleRadius" json:"center_circle_radius,omitempty"`
	// Thickness/width of the lines on the field in mm
	LineThickness *int32 `protobuf:"varint,9,opt,name=line_thickness,json=lineThickness" json:"line_thickness,omitempty"`
	// Distance between the goal center and the center of the penalty mark in mm
	GoalCenterToPenaltyMark *int32 `protobuf:"varint,10,opt,name=goal_center_to_penalty_mark,json=goalCenterToPenaltyMark" json:"goal_center_to_penalty_mark,omitempty"`
	// Goal height in mm
	GoalHeight *int32 `protobuf:"varint,11,opt,name=goal_height,json=goalHeight" json:"goal_height,omitempty"`
	// Ball radius in mm (note that this is a float type to represent sub-mm precision)
	BallRadius *float32 `protobuf:"fixed32,12,opt,name=ball_radius,json=ballRadius" json:"ball_radius,omitempty"`
	// Max allowed robot radius in mm (note that this is a float type to represent sub-mm precision)
	MaxRobotRadius *float32 `protobuf:"fixed32,13,opt,name=max_robot_radius,json=maxRobotRadius" json:"max_robot_radius,omitempty"`
	GoalX          *float32 `protobuf:"fixed32,14,req,name=goal_x,json=goalX" json:"goal_x,omitempty"`
	GoalY          *float32 `protobuf:"fixed32,15,req,name=goal_y,json=goalY" json:"goal_y,omitempty"`
}

func (x *Geometry_Info) Reset() {
	*x = Geometry_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_to_racoonai_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geometry_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geometry_Info) ProtoMessage() {}

func (x *Geometry_Info) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geometry_Info.ProtoReflect.Descriptor instead.
func (*Geometry_Info) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{2}
}

func (x *Geometry_Info) GetFieldLength() int32 {
	if x != nil && x.FieldLength != nil {
		return *x.FieldLength
	}
	return 0
}

func (x *Geometry_Info) GetFieldWidth() int32 {
	if x != nil && x.FieldWidth != nil {
		return *x.FieldWidth
	}
	return 0
}

func (x *Geometry_Info) GetGoalWidth() int32 {
	if x != nil && x.GoalWidth != nil {
		return *x.GoalWidth
	}
	return 0
}

func (x *Geometry_Info) GetGoalDepth() int32 {
	if x != nil && x.GoalDepth != nil {
		return *x.GoalDepth
	}
	return 0
}

func (x *Geometry_Info) GetBoundaryWidth() int32 {
	if x != nil && x.BoundaryWidth != nil {
		return *x.BoundaryWidth
	}
	return 0
}

func (x *Geometry_Info) GetPenaltyAreaDepth() int32 {
	if x != nil && x.PenaltyAreaDepth != nil {
		return *x.PenaltyAreaDepth
	}
	return 0
}

func (x *Geometry_Info) GetPenaltyAreaWidth() int32 {
	if x != nil && x.PenaltyAreaWidth != nil {
		return *x.PenaltyAreaWidth
	}
	return 0
}

func (x *Geometry_Info) GetCenterCircleRadius() int32 {
	if x != nil && x.CenterCircleRadius != nil {
		return *x.CenterCircleRadius
	}
	return 0
}

func (x *Geometry_Info) GetLineThickness() int32 {
	if x != nil && x.LineThickness != nil {
		return *x.LineThickness
	}
	return 0
}

func (x *Geometry_Info) GetGoalCenterToPenaltyMark() int32 {
	if x != nil && x.GoalCenterToPenaltyMark != nil {
		return *x.GoalCenterToPenaltyMark
	}
	return 0
}

func (x *Geometry_Info) GetGoalHeight() int32 {
	if x != nil && x.GoalHeight != nil {
		return *x.GoalHeight
	}
	return 0
}

func (x *Geometry_Info) GetBallRadius() float32 {
	if x != nil && x.BallRadius != nil {
		return *x.BallRadius
	}
	return 0
}

func (x *Geometry_Info) GetMaxRobotRadius() float32 {
	if x != nil && x.MaxRobotRadius != nil {
		return *x.MaxRobotRadius
	}
	return 0
}

func (x *Geometry_Info) GetGoalX() float32 {
	if x != nil && x.GoalX != nil {
		return *x.GoalX
	}
	return 0
}

func (x *Geometry_Info) GetGoalY() float32 {
	if x != nil && x.GoalY != nil {
		return *x.GoalY
	}
	return 0
}

type Referee_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command        *Referee_Info_Command `protobuf:"varint,1,req,name=command,enum=Referee_Info_Command" json:"command,omitempty"`
	Stage          *Referee_Info_Stage   `protobuf:"varint,2,req,name=stage,enum=Referee_Info_Stage" json:"stage,omitempty"`
	YellowCards    *uint32               `protobuf:"varint,3,req,name=yellow_cards,json=yellowCards" json:"yellow_cards,omitempty"`
	RedCards       *uint32               `protobuf:"varint,4,req,name=red_cards,json=redCards" json:"red_cards,omitempty"`
	PreCommand     *Referee_Info_Command `protobuf:"varint,5,opt,name=pre_command,json=preCommand,enum=Referee_Info_Command" json:"pre_command,omitempty"`
	NextCommand    *Referee_Info_Command `protobuf:"varint,6,opt,name=next_command,json=nextCommand,enum=Referee_Info_Command" json:"next_command,omitempty"`
	BallPlacementX *float32              `protobuf:"fixed32,7,opt,name=ball_placement_x,json=ballPlacementX" json:"ball_placement_x,omitempty"`
	BallPlacementY *float32              `protobuf:"fixed32,8,opt,name=ball_placement_y,json=ballPlacementY" json:"ball_placement_y,omitempty"`
}

func (x *Referee_Info) Reset() {
	*x = Referee_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_to_racoonai_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referee_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee_Info) ProtoMessage() {}

func (x *Referee_Info) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee_Info.ProtoReflect.Descriptor instead.
func (*Referee_Info) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{3}
}

func (x *Referee_Info) GetCommand() Referee_Info_Command {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return Referee_Info_HALT
}

func (x *Referee_Info) GetStage() Referee_Info_Stage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Referee_Info_NORMAL_FIRST_HALF_PRE
}

func (x *Referee_Info) GetYellowCards() uint32 {
	if x != nil && x.YellowCards != nil {
		return *x.YellowCards
	}
	return 0
}

func (x *Referee_Info) GetRedCards() uint32 {
	if x != nil && x.RedCards != nil {
		return *x.RedCards
	}
	return 0
}

func (x *Referee_Info) GetPreCommand() Referee_Info_Command {
	if x != nil && x.PreCommand != nil {
		return *x.PreCommand
	}
	return Referee_Info_HALT
}

func (x *Referee_Info) GetNextCommand() Referee_Info_Command {
	if x != nil && x.NextCommand != nil {
		return *x.NextCommand
	}
	return Referee_Info_HALT
}

func (x *Referee_Info) GetBallPlacementX() float32 {
	if x != nil && x.BallPlacementX != nil {
		return *x.BallPlacementX
	}
	return 0
}

func (x *Referee_Info) GetBallPlacementY() float32 {
	if x != nil && x.BallPlacementY != nil {
		return *x.BallPlacementY
	}
	return 0
}

type Other_Infos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfCameras     *int32   `protobuf:"varint,1,req,name=num_of_cameras,json=numOfCameras" json:"num_of_cameras,omitempty"`
	NumOfOurRobots   *int32   `protobuf:"varint,2,req,name=num_of_our_robots,json=numOfOurRobots" json:"num_of_our_robots,omitempty"`
	NumOfEnemyRobots *int32   `protobuf:"varint,3,req,name=num_of_enemy_robots,json=numOfEnemyRobots" json:"num_of_enemy_robots,omitempty"`
	Secperframe      *float32 `protobuf:"fixed32,4,req,name=secperframe" json:"secperframe,omitempty"`
	IsVisionRecv     *bool    `protobuf:"varint,5,req,name=is_vision_recv,json=isVisionRecv" json:"is_vision_recv,omitempty"`
	AttackDirection  *int32   `protobuf:"varint,6,req,name=attack_direction,json=attackDirection" json:"attack_direction,omitempty"`
	IsBallMoving     *bool    `protobuf:"varint,7,req,name=is_ball_moving,json=isBallMoving" json:"is_ball_moving,omitempty"`
}

func (x *Other_Infos) Reset() {
	*x = Other_Infos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_to_racoonai_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Other_Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Other_Infos) ProtoMessage() {}

func (x *Other_Infos) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Other_Infos.ProtoReflect.Descriptor instead.
func (*Other_Infos) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{4}
}

func (x *Other_Infos) GetNumOfCameras() int32 {
	if x != nil && x.NumOfCameras != nil {
		return *x.NumOfCameras
	}
	return 0
}

func (x *Other_Infos) GetNumOfOurRobots() int32 {
	if x != nil && x.NumOfOurRobots != nil {
		return *x.NumOfOurRobots
	}
	return 0
}

func (x *Other_Infos) GetNumOfEnemyRobots() int32 {
	if x != nil && x.NumOfEnemyRobots != nil {
		return *x.NumOfEnemyRobots
	}
	return 0
}

func (x *Other_Infos) GetSecperframe() float32 {
	if x != nil && x.Secperframe != nil {
		return *x.Secperframe
	}
	return 0
}

func (x *Other_Infos) GetIsVisionRecv() bool {
	if x != nil && x.IsVisionRecv != nil {
		return *x.IsVisionRecv
	}
	return false
}

func (x *Other_Infos) GetAttackDirection() int32 {
	if x != nil && x.AttackDirection != nil {
		return *x.AttackDirection
	}
	return 0
}

func (x *Other_Infos) GetIsBallMoving() bool {
	if x != nil && x.IsBallMoving != nil {
		return *x.IsBallMoving
	}
	return false
}

type RacoonMW_Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OurRobots   []*Robot_Infos `protobuf:"bytes,1,rep,name=our_robots,json=ourRobots" json:"our_robots,omitempty"`
	EnemyRobots []*Robot_Infos `protobuf:"bytes,2,rep,name=enemy_robots,json=enemyRobots" json:"enemy_robots,omitempty"`
	Geometry    *Geometry_Info `protobuf:"bytes,3,req,name=geometry" json:"geometry,omitempty"`
	Ball        *Ball_Info     `protobuf:"bytes,4,req,name=ball" json:"ball,omitempty"`
	Referee     *Referee_Info  `protobuf:"bytes,5,req,name=referee" json:"referee,omitempty"`
	Info        *Other_Infos   `protobuf:"bytes,6,req,name=info" json:"info,omitempty"`
}

func (x *RacoonMW_Packet) Reset() {
	*x = RacoonMW_Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_to_racoonai_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RacoonMW_Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RacoonMW_Packet) ProtoMessage() {}

func (x *RacoonMW_Packet) ProtoReflect() protoreflect.Message {
	mi := &file_to_racoonai_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RacoonMW_Packet.ProtoReflect.Descriptor instead.
func (*RacoonMW_Packet) Descriptor() ([]byte, []int) {
	return file_to_racoonai_proto_rawDescGZIP(), []int{5}
}

func (x *RacoonMW_Packet) GetOurRobots() []*Robot_Infos {
	if x != nil {
		return x.OurRobots
	}
	return nil
}

func (x *RacoonMW_Packet) GetEnemyRobots() []*Robot_Infos {
	if x != nil {
		return x.EnemyRobots
	}
	return nil
}

func (x *RacoonMW_Packet) GetGeometry() *Geometry_Info {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *RacoonMW_Packet) GetBall() *Ball_Info {
	if x != nil {
		return x.Ball
	}
	return nil
}

func (x *RacoonMW_Packet) GetReferee() *Referee_Info {
	if x != nil {
		return x.Referee
	}
	return nil
}

func (x *RacoonMW_Packet) GetInfo() *Other_Infos {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_to_racoonai_proto protoreflect.FileDescriptor

var file_to_racoonai_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x63, 0x6f, 0x6f, 0x6e, 0x61, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x03, 0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x64, 0x69,
	0x66, 0x66, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x79, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x02, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x59, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x09, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09,
	0x64, 0x69, 0x66, 0x66, 0x54, 0x68, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0f, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x61,
	0x6c, 0x6c, 0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x09, 0x42, 0x61, 0x6c,
	0x6c, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x58, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x59, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x78, 0x18, 0x06, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05,
	0x64, 0x69, 0x66, 0x66, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x79, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x59, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x0b, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0xc5, 0x04, 0x0a, 0x0d, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x72, 0x65, 0x61, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x67, 0x6f, 0x61,
	0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x67, 0x6f, 0x61, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f,
	0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62,
	0x61, 0x6c, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x78, 0x18, 0x0e, 0x20,
	0x02, 0x28, 0x02, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x6f,
	0x61, 0x6c, 0x5f, 0x79, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c,
	0x59, 0x22, 0xd5, 0x08, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x59, 0x22, 0x8e, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54,
	0x4f, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b,
	0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x42, 0x4c, 0x55,
	0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10,
	0x09, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x4c, 0x55,
	0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x59,
	0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x47, 0x4f, 0x41,
	0x4c, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x11,
	0x0a, 0x09, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0f, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4c, 0x55, 0x45, 0x10, 0x11, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x46,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52,
	0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x4e, 0x41,
	0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x4b, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f,
	0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0d, 0x22, 0xa6, 0x02, 0x0a, 0x0b, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x12,
	0x29, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f,
	0x66, 0x4f, 0x75, 0x72, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x70, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x70, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x76, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x22, 0x86, 0x02, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x6f, 0x6f, 0x6e, 0x4d, 0x57, 0x5f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x09, 0x6f, 0x75, 0x72, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x04, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x6c, 0x6c,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x69, 0x6f, 0x6e, 0x65, 0x2d,
	0x53, 0x53, 0x4c, 0x2f, 0x52, 0x41, 0x43, 0x4f, 0x4f, 0x4e, 0x2d, 0x50, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e,
}

var (
	file_to_racoonai_proto_rawDescOnce sync.Once
	file_to_racoonai_proto_rawDescData = file_to_racoonai_proto_rawDesc
)

func file_to_racoonai_proto_rawDescGZIP() []byte {
	file_to_racoonai_proto_rawDescOnce.Do(func() {
		file_to_racoonai_proto_rawDescData = protoimpl.X.CompressGZIP(file_to_racoonai_proto_rawDescData)
	})
	return file_to_racoonai_proto_rawDescData
}

var file_to_racoonai_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_to_racoonai_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_to_racoonai_proto_goTypes = []interface{}{
	(Referee_Info_Command)(0), // 0: Referee_Info.Command
	(Referee_Info_Stage)(0),   // 1: Referee_Info.Stage
	(*Robot_Infos)(nil),       // 2: Robot_Infos
	(*Ball_Info)(nil),         // 3: Ball_Info
	(*Geometry_Info)(nil),     // 4: Geometry_Info
	(*Referee_Info)(nil),      // 5: Referee_Info
	(*Other_Infos)(nil),       // 6: Other_Infos
	(*RacoonMW_Packet)(nil),   // 7: RacoonMW_Packet
}
var file_to_racoonai_proto_depIdxs = []int32{
	0,  // 0: Referee_Info.command:type_name -> Referee_Info.Command
	1,  // 1: Referee_Info.stage:type_name -> Referee_Info.Stage
	0,  // 2: Referee_Info.pre_command:type_name -> Referee_Info.Command
	0,  // 3: Referee_Info.next_command:type_name -> Referee_Info.Command
	2,  // 4: RacoonMW_Packet.our_robots:type_name -> Robot_Infos
	2,  // 5: RacoonMW_Packet.enemy_robots:type_name -> Robot_Infos
	4,  // 6: RacoonMW_Packet.geometry:type_name -> Geometry_Info
	3,  // 7: RacoonMW_Packet.ball:type_name -> Ball_Info
	5,  // 8: RacoonMW_Packet.referee:type_name -> Referee_Info
	6,  // 9: RacoonMW_Packet.info:type_name -> Other_Infos
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_to_racoonai_proto_init() }
func file_to_racoonai_proto_init() {
	if File_to_racoonai_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_to_racoonai_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Robot_Infos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_to_racoonai_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ball_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_to_racoonai_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geometry_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_to_racoonai_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referee_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_to_racoonai_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Other_Infos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_to_racoonai_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RacoonMW_Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_to_racoonai_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_to_racoonai_proto_goTypes,
		DependencyIndexes: file_to_racoonai_proto_depIdxs,
		EnumInfos:         file_to_racoonai_proto_enumTypes,
		MessageInfos:      file_to_racoonai_proto_msgTypes,
	}.Build()
	File_to_racoonai_proto = out.File
	file_to_racoonai_proto_rawDesc = nil
	file_to_racoonai_proto_goTypes = nil
	file_to_racoonai_proto_depIdxs = nil
}
